services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: booking
      POSTGRES_PASSWORD: bookingpass
      POSTGRES_DB: bookingdb
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U booking -d bookingdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # Flask-Limiter
      RATE_LIMIT_STORAGE_URI: redis://redis:6379/0
      DEFAULT_RATE_LIMITS: 300 per hour;50 per minute
      # Keep a single scheduler instance (see note in __init__.py)
      RUN_SCHEDULER: "1"
    # keep 8080 internal; Caddy will reverse-proxy
    command: >
      bash -lc "flask --app app.main db_init &&
                gunicorn -w 1 -b 0.0.0.0:8080 app.main:app --timeout 600"

  caddy:
    image: caddy:2
    restart: unless-stopped
    depends_on:
      - web
    ports:
      - "80:80"
      # When you switch to a real domain + HTTPS, also expose 443 and
      # update your Caddyfile accordingly:
      # - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config

volumes:
  dbdata:
  caddy_data:
  caddy_config:
